
3303	
3304	template <class _Allocator>
3305	size_t
3306	vector<bool, _Allocator>::__hash_code() const _NOEXCEPT
3307	{
3308	    size_t __h = 0;
3309	    // do middle whole words
3310	    size_type __n = __size_;
3311	    __storage_pointer __p = __begin_;
3312	    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
3313	        __h ^= *__p;
3314	    // do last partial word
3315	    if (__n > 0)
3316	    {
3317	        const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
3318	        __h ^= *__p & __m;
3319	    }
3320	    return __h;
3321	}
3322	
3323	template <class _Allocator>
3324	struct _LIBCPP_TEMPLATE_VIS hash<vector<bool, _Allocator> >
3325	    : public unary_function<vector<bool, _Allocator>, size_t>
3326	{
3327	    _LIBCPP_INLINE_VISIBILITY
3328	    size_t operator()(const vector<bool, _Allocator>& __vec) const _NOEXCEPT
3329	        {return __vec.__hash_code();}
3330	};
3331	
3332	template <class _Tp, class _Allocator>
3333	inline _LIBCPP_INLINE_VISIBILITY
3334	bool
3335	operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
3336	{
3337	    const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();
3338	    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());
3339	}
3340	
3341	template <class _Tp, class _Allocator>
3342	inline _LIBCPP_INLINE_VISIBILITY
3343	bool
3344	operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
3345	{
3346	    return !(__x == __y);
3347	}
3348	
3349	template <class _Tp, class _Allocator>
3350	inline _LIBCPP_INLINE_VISIBILITY
3351	bool
3352	operator< (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
3353	{
3354	    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
3355	}
3356	
3357	template <class _Tp, class _Allocator>
3358	inline _LIBCPP_INLINE_VISIBILITY
3359	bool
3360	operator> (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
3361	{
3362	    return __y < __x;
3363	}
3364	
3365	template <class _Tp, class _Allocator>
3366	inline _LIBCPP_INLINE_VISIBILITY
3367	bool
3368	operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
3369	{
3370	    return !(__x < __y);
3371	}
3372	
3373	template <class _Tp, class _Allocator>
3374	inline _LIBCPP_INLINE_VISIBILITY
3375	bool
3376	operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
3377	{
3378	    return !(__y < __x);
3379	}
3380	
3381	template <class _Tp, class _Allocator>
3382	inline _LIBCPP_INLINE_VISIBILITY
3383	void
3384	swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y)
3385	    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
3386	{
3387	    __x.swap(__y);
3388	}
3389	
3390	#if _LIBCPP_STD_VER > 17
3391	template <class _Tp, class _Allocator, class _Up>
3392	inline _LIBCPP_INLINE_VISIBILITY
3393	void erase(vector<_Tp, _Allocator>& __c, const _Up& __v)
3394	{ __c.erase(_VSTD::remove(__c.begin(), __c.end(), __v), __c.end()); }
3395	
3396	template <class _Tp, class _Allocator, class _Predicate>
3397	inline _LIBCPP_INLINE_VISIBILITY
3398	void erase_if(vector<_Tp, _Allocator>& __c, _Predicate __pred)
3399	{ __c.erase(_VSTD::remove_if(__c.begin(), __c.end(), __pred), __c.end()); }
3400	#endif
3401	
3402	_LIBCPP_END_NAMESPACE_STD
3403	
3404	_LIBCPP_POP_MACROS
3405	
3406	#endif  // _LIBCPP_VECTOR
